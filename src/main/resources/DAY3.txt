1. 웹 기본 동작 방식 이해

1-1 브라우저  =>  웹서버(하나의 브라우저의 요청당 (request, response) 객체 할당)   => WAS(Tomcat)
==> 서블릿(Servlet) 동작 (웹 클래스), JSP (Java Server Page) => HTML태그와 같이 사용할 수 있는 클래스

브라우저는 자신이 원하는 정보를 전달하기 위해서 두가징 방식을 이용한다.

1.Get 방식 : 주소창에 직접 원하는 데이터를 적거나 링크<a>를 클릭해서 호출
            원하는 웹 주소를 호출할때 필요한 데이터를 '?','&' 이용해서 같이 전송하는 방식

2.Post 방식 : 입력화면 <form method="정보전달 방식 지정" action="서버로 전송하기"> <input type=text ></form>
              주소와 데이터를 따로 보내는 방식. 회원가입이나 로그인 등이 해당된다.
              웹 화면을 통해서 실제 처리가 필요한 작업을 하기 위한 방식


브라우저는 서버에 데이터를 요청하는 것 '요청(Request)'
         서버는 이에(해당 Request에 대해) '응답(Response)' 데이터를 만들어 브라우저로 보내야 한다.

         서버는 판단해야 한다. (브라우저에서 요청한느 정보의 유형)
         Web-Server 담당: 정적 데이터(static data)  :  항상 동일하게 고정된 데이터 (HTML, CSS, 이미지, 동영상 등의 데이터)
         WAS-담당 : 동적 데이터 (dynamic data) : 매번 필요할 때마다 다른 데이터를 동적으로 구성해서 전송해야하느 데이터 (서버 사이드 프로그래밍)
                                     PHP, JSP, Servlet 프로그래밍  (서버에서 동적으로 동작하는 웹기반 프로그램 작성)



1-2 HTTP 약속
    브라우저의 요청과 서버의 응답 사이에 약속을 통해서 처리되는 데이터 교환 (프로토콜 : protocol)
    웹에서는 HTTP(Hyper Text Transfer Protocol) 방식으로 메시지 교환을 한다.
    https:// ==> 스킴(프로토콜)
    www(웹 서비스 : World Wide Web)   www.goole.com  (도메인 : domain = 호스트 (host)

    - HTTP 메시지 확인   (브라우저 개발자 도구 > Network 탭 ) => 어떤 데이터가 교환되는지 확인
    - HTTP 메시지 구성
      브라우저에서 전송 (Request 메시지)
      서버에서 데이터를 전송 시 구성이 된다. (Response 메시지)

      헤더(Headers)와 몸체(Body) 구성  ==> 편지를 생각하자 .  '편지지'=> Body  '편지봉투' => Headers

      URI (자원의 식별 방식)
       - URL (위치 식별)
       - URN (이름 식별)
      브라우저에서 특정한 URL 을 호출  '요청' 과 '응답' 이 하나의 묶여서 처리된다.

      - 비연결성 (Connectionless) : 지속적인 연결을 보장하지 않는다.  왜?
        웹의 특성상 여러명의 사용자들이 브라우저를 통해서 서버를 호출하기 때문이다.
        서버는 최대한 많은 사용자에게 서비스를 제공하는 것이 목적이다.
        이를 위해 요청과 응답을 처리한 후에는 연결을 종료한다.

       새로고침이란? 서버에 다시 요청을 보내는 행위
       ========================================================================================================

   서버 사이드 프로그래밍 : 서버 쪽에서 프로그래밍을 통해서 데이터를 처리할 수 있도록 프로그램 개발
   (자바) 서버 사이드 프로그래밍 진행하겠습니다.

   해야할일
   - 동시에 여러 요청(Request)가 들어온다면 어떻게 처리해야 할까?
   - 서버에서 문제가 생기면 이를 어떻게 처리해야 하는가? 이에 대한 다양한 기술적인 처리 방법 찾아내서 해결해야 하고 그 과정이 중요하다.
   - 어떤 방법으로 데이터 전송할때 최적화 할 수 있을까?  (성능평가, 서버 부하 테스트)
   - 분산환경 이나 분산처리 같은 문제들에 대해서 들여다 보고 서버를 운영하는 방법에 대해 고민해 봅시다.

    https://linux.systemv.pe.kr/?s=ee-8    자바의 경우 위에서 고민한 결과를 JaveEE 기술 스펙으로 정리해 놓았다.

    Servlet(서버에서 클래스), JSP(사용자에게 서버에서 보내주는 메시지를 처리해서 보여주는) 기술이다.

    - Servlet (서블릿) 기술
      서버에서 동적으로 요청과 응답을 처리하는 API 들을 정의한 것

      서블릿을 지원하는 환경(WAS : Tomcat)에서  서블릿 API 를 이용해서 코드를 작성하고
      서버에 설정해서 서블릿 프로그램을 작성한다.

      Tomcat 의 역할
      -  웹 클래스는 웹컨테이너(Tomcat)이 객체를 생성하고, 호출한다.
      -  서블릿 클래스에서 생성하는 객체의 관리한다.
      -  서블릿/JSP 코드 개발은  자바(J2SE API) +  서블릿 API 를 함께 사용하여 개발한다.

      JSP는 기본저걱으로 GET/POST 방식의 호출을 구분하지 않기 때문에 POST 방식 으로 접근해야 하는 리소스도 GET으로 호출할 수 있다.
      유지보수 측면에서도 다시 리소스의 URL을 재조정해야 하는 불편함이 존재한다.

      - 현재 자바의 JSP 사용
        1) JSP에서 쿼리스트링이나 파라미터를 처리하지 않는다.
        2) JSP는 입력화면을 구성하거나 처리 결과를 출력하는 용도
        3) 브라우저는 직접 JSP 경로를 호출하지 않고 서블릿 경로를 통해서 JSP 파일을 보는 방식

        문제를 해결하기 위해 '웹 MVC' 방식으로  비지니스 로직은 서블릿에서 처리 결과는 JSP에서 역할을 분담하도록 구조를 개선하여 사용하고 있다.


3. WebMVC 방식
   서블릿 코드는 자바 코드를 이용할 수 있고, 상속이나 인터페이스의 처리도 가능하다.
   WebMVC (Model - View - Controller) 역할을 분리해서 처리하는 구조이다.

   데이터는 Controller 에서
   결과는 View 에서 처리함


  MVC 구조로 다시 설계 (계산기)

  Get 방식 설계
  입력화면 요구사항
  - 브라우저는 /input  주소를 호출한다.
  - /input 에 맞는 서블릿을 InputController 로 작성하고 , GET 방식일때만 동작하도록 구현한다.
  - InputController 의 화면처리는 input.jsp 를 이용하도록 한다.
  - input.jsp 는 HTML 코드를 이용하여 브라우저에서 볼 수 있도록 결과물을 생성한다.


   10 10 ==> input.jsp 에서 입력  calcResult.jsp 처리해서 결과를 출력


   POST 방식으로 설계
   1. input.jsp 의 <form> action = '/calcResult'  CalcResultServlet 서블릿 클래스 컨트롤러를 작성한다.
   2.  CalcResultServlet은 <form> 으로 전달된 num1, num2 데이터를 읽어내서 결과 데이터를 만든다.
   3.  만들어진 결과를 calcResult.jsp 에 전달하여 결과데이터를 출력한다.


PRG 패턴 (POST-Redirect-GET)    : 웹 MVC 구조에서 흔하게 사용하는 패턴. POST방식과 Redirect 을 결합해서 사용하는 패턴이다.

- 사용자는 컨트롤러에게 원하는 작업을 POST 방식 처리 요청
- POST 방식을 컨트롤러에서 처리하고 브라우저는 다른 경로로 이동(GET)하라는 응답을(Redirect) 한다.
- 브라우저는 GET 방식으로 이동


























































































